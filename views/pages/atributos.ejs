<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>
</head>
<body class="container">

<header>
    <%- include('../partials/auth_header'); %>
</header>

<main>
<div class="row">
  <div class="col-sm-12">
    <div class="jumbotron d-flex flex-column align-items-center">
      <h1 class="mb-3">Diagrama de Atributos</h1>
      <div id="diagramaDeAtributos" style="background-color: whitesmoke; border: solid 1px black; width: 100%; height: 400px"></div>
    </div>
  </div>
</div>
</main>

<footer>
  <%- include('../partials/footer'); %>
</footer>

<script src="https://unpkg.com/gojs/release/go-debug.js"></script>
<script>
    const requisitos = <%- JSON.stringify(requisitos) %>;
    function init() {

        // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
        // For details, see https://gojs.net/latest/intro/buildingObjects.html
        const $ = go.GraphObject.make;  // for conciseness in defining templates

        myDiagram =
        $(go.Diagram, "diagramaDeAtributos",  // must name or refer to the DIV HTML element
            {
            allowDelete: false,
            allowCopy: false,
            layout: $(go.ForceDirectedLayout),
            "undoManager.isEnabled": true
            });

        var colors = {
        'red': '#be4b15',
        'green': '#52ce60',
        'blue': '#6ea5f8',
        'lightred': '#fd8852',
        'lightblue': '#afd4fe',
        'lightgreen': '#b9e986',
        'pink': '#faadc1',
        'purple': '#d689ff',
        'orange': '#fdb400',
        }

        let entidades = requisitos.map(requisito => {
            if (requisito.entidade !== "N/A") {
                return {
                    key: requisito.entidade,
                    items: requisito.atributos.split(",").map(atributo => {
                        return {name: atributo, figure: "Decision", color: colors[Object.keys(colors)[Math.floor(Math.random() * Object.keys(colors).length)]]}
                    }),
                    identificador: requisito.identificador
                }
            }
        });

        entidades = entidades.filter(item => item !== undefined);

        // entidades = entidades.filter((entidade, index) => {
        //     entidades.findIndex(a => a.key === entidade.key) === index
        // });

        const relacoes = [];

        for (let i=0; i<requisitos.length; i++) {
            if (requisitos[i].condicoes === "*") {
            continue;
            }

            const condicoes = requisitos[i].condicoes
            .split(/(include|extend|generalization)/gi).slice(1).join(":::::")
            .replace(/\(|\)|\*/gi, "")
            .split("\n")
            .filter(item => item && item !== "");

            for (let condicao of condicoes) {
                const [ tipo, identificador ] = condicao.split(":::::")
                const entidade = requisitos.find(item => item.identificador === identificador).entidade;
                console.log(entidade, entidades)
                relacoes.push({from: requisitos[i].entidade, to: entidade, text: "1..N"});
            }
        }

        console.log(relacoes);

        // the template for each attribute in a node's array of item data
        var itemTempl =
        $(go.Panel, "Horizontal",
            $(go.Shape,
            { desiredSize: new go.Size(15, 15), strokeJoin: "round", strokeWidth: 3, stroke: null, margin: 2 },
            new go.Binding("figure", "figure"),
            new go.Binding("fill", "color"),
            new go.Binding("stroke", "color")),
            $(go.TextBlock,
            {
                stroke: "#333333",
                font: "bold 14px sans-serif"
            },
            new go.Binding("text", "name"))
        );

        // define the Node template, representing an entity
        myDiagram.nodeTemplate =
        $(go.Node, "Auto",  // the whole node panel
            {
            selectionAdorned: true,
            resizable: true,
            layoutConditions: go.Part.LayoutStandard & ~go.Part.LayoutNodeSized,
            fromSpot: go.Spot.AllSides,
            toSpot: go.Spot.AllSides,
            isShadowed: true,
            shadowOffset: new go.Point(3, 3),
            shadowColor: "#C5C1AA"
            },
            new go.Binding("location", "location").makeTwoWay(),
            // whenever the PanelExpanderButton changes the visible property of the "LIST" panel,
            // clear out any desiredSize set by the ResizingTool.
            new go.Binding("desiredSize", "visible", v => new go.Size(NaN, NaN)).ofObject("LIST"),
            // define the node's outer shape, which will surround the Table
            $(go.Shape, "RoundedRectangle",
            { fill: 'white', stroke: "#eeeeee", strokeWidth: 3 }),
            $(go.Panel, "Table",
            { margin: 8, stretch: go.GraphObject.Fill },
            $(go.RowColumnDefinition, { row: 0, sizing: go.RowColumnDefinition.None }),
            // the table header
            $(go.TextBlock,
                {
                row: 0, alignment: go.Spot.Center,
                margin: new go.Margin(0, 24, 0, 2),  // leave room for Button
                font: "bold 16px sans-serif"
                },
                new go.Binding("text", "key")),
            // the collapse/expand button
            $("PanelExpanderButton", "LIST",  // the name of the element whose visibility this button toggles
                { row: 0, alignment: go.Spot.TopRight }),
            // the list of Panels, each showing an attribute
            $(go.Panel, "Vertical",
                {
                name: "LIST",
                row: 1,
                padding: 3,
                alignment: go.Spot.TopLeft,
                defaultAlignment: go.Spot.Left,
                stretch: go.GraphObject.Horizontal,
                itemTemplate: itemTempl
                },
                new go.Binding("itemArray", "items"))
            )  // end Table Panel
        );  // end Node

        // define the Link template, representing a relationship
        myDiagram.linkTemplate =
        $(go.Link,  // the whole link panel
            {
            selectionAdorned: true,
            layerName: "Foreground",
            reshapable: true,
            routing: go.Link.AvoidsNodes,
            corner: 5,
            curve: go.Link.JumpOver
            },
            $(go.Shape,  // the link shape
            { stroke: "#303B45", strokeWidth: 2.5 }),
            $(go.TextBlock,  // the "from" label
            {
                textAlign: "center",
                font: "bold 14px sans-serif",
                stroke: "#1967B3",
                segmentIndex: 0,
                segmentOffset: new go.Point(NaN, NaN),
                segmentOrientation: go.Link.OrientUpright
            },
            new go.Binding("text", "text")),
            $(go.TextBlock,  // the "to" label
            {
                textAlign: "center",
                font: "bold 14px sans-serif",
                stroke: "#1967B3",
                segmentIndex: -1,
                segmentOffset: new go.Point(NaN, NaN),
                segmentOrientation: go.Link.OrientUpright
            },
            new go.Binding("text", "toText"))
        );

        // create the model for the E-R diagram
        var nodeDataArray = [
        {
            key: "Products",
            items: [{ name: "ProductID", iskey: true, figure: "Decision", color: colors.red },
            { name: "ProductName", iskey: false, figure: "Hexagon", color: colors.blue },
            { name: "SupplierID", iskey: false, figure: "Decision", color: "purple" },
            { name: "CategoryID", iskey: false, figure: "Decision", color: "purple" }]
        },
        {
            key: "Suppliers",
            items: [{ name: "SupplierID", iskey: true, figure: "Decision", color: colors.red },
            { name: "CompanyName", iskey: false, figure: "Hexagon", color: colors.blue },
            { name: "ContactName", iskey: false, figure: "Hexagon", color: colors.blue },
            { name: "Address", iskey: false, figure: "Hexagon", color: colors.blue }]
        },
        {
            key: "Categories",
            items: [{ name: "CategoryID", iskey: true, figure: "Decision", color: colors.red },
            { name: "CategoryName", iskey: false, figure: "Hexagon", color: colors.blue },
            { name: "Description", iskey: false, figure: "Hexagon", color: colors.blue },
            { name: "Picture", iskey: false, figure: "TriangleUp", color: colors.pink }]
        },
        {
            key: "Order Details",
            items: [{ name: "OrderID", iskey: true, figure: "Decision", color: colors.red },
            { name: "ProductID", iskey: true, figure: "Decision", color: colors.red },
            { name: "UnitPrice", iskey: false, figure: "Circle", color: colors.green },
            { name: "Quantity", iskey: false, figure: "Circle", color: colors.green },
            { name: "Discount", iskey: false, figure: "Circle", color: colors.green }]
        },
        ];
        var linkDataArray = [
        { from: "Products", to: "Suppliers", text: "0..N", toText: "1" },
        { from: "Products", to: "Categories", text: "0..N", toText: "1" },
        { from: "Order Details", to: "Products", text: "0..N", toText: "1" }
        ];
        myDiagram.model = new go.GraphLinksModel(
        {
            copiesArrays: true,
            copiesArrayObjects: true,
            nodeDataArray: entidades,
            linkDataArray: relacoes
        });
    }
    window.addEventListener('DOMContentLoaded', init);
</script>

</body>
</html>